// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id             String        @id @default(uuid())
  username       String?       @unique
  firstName      String
  lastName       String
  email          String        @unique
  userData       String
  emailVerified  Boolean       @default(false)
  phone          String?       @unique
  phoneVerified  Boolean       @default(false)
  roles          UserRole[]
  profilePicture String?
  business       Business?     @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId     String?
  applications   Application[]
  lastSignin     DateTime?
  activities     Activity[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model UserRole {
  id        String   @id @default(uuid())
  role      Role
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  DEVELOPER
  MARKETING
  OPERATIONS
  SUPPLYCHAIN
  USER
}

model Business {
  id           String        @id @default(uuid())
  name         String
  code         String        @unique
  verified     Boolean       @default(false)
  logo         String?
  users        User[]
  applications Application[]
  invites      Invite[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Invite {
  id            String       @id @default(uuid())
  inviteType    InviteType
  role          Role
  business      Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId    String
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  email         String
  code          String       @unique @default(cuid())
  inviteStatus  InviteStatus @default(PENDING)
  inviteExpiry  DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum InviteType {
  BUSINESS
  USER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Application {
  id         String     @id @default(uuid())
  name       String
  type       AppType
  appData    String
  token      String?    @unique
  users      User[]
  business   Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String
  activities Activity[]
  invites    Invite[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum AppType {
  DASHBOARD
  WEB
  MOBILE
}

model Activity {
  id            String       @id @default(uuid())
  type          ActivityType
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  data          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum ActivityType {
  CUSTOM
  CREATE_BUSINESS_USER
  UPDATE_BUSINESS_USER
  DELETE_BUSINESS_USER
  CREATE_BUSINESS
  UPDATE_BUSINESS
  DELETE_BUSINESS
  CREATE_APPLICATION
  UPDATE_APPLICATION
  DELETE_APPLICATION
}
